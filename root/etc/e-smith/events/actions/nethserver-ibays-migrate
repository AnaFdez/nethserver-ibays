#!/usr/bin/perl

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use NethServer::Migrate qw(migrateDir);
use esmith::AccountsDB;
use esmith::ConfigDB;
use esmith::event;

my $event = shift;
my $sourceDir = shift;
my $esmithDbDir = '/home/e-smith/db';
my $errors = 0;

if( ! $event ) {
    die("Missing event argument!\n");
}

if( ! $sourceDir ) {
    die("Missing sourceDir argument!\n");
}


my $srcConfigDb = esmith::ConfigDB->open_ro(join('', $sourceDir, $esmithDbDir, '/configuration')) or die("Could not open source configuration database in $sourceDir \n");
my $dstConfigDb = esmith::ConfigDB->open('configuration') or die("Could not open configuration account db\n");

my $srcAccountsDb = esmith::AccountsDB->open_ro(join('', $sourceDir, $esmithDbDir, '/accounts')) or die("Could not open source accounts database in $sourceDir \n");
my $dstAccountsDb = esmith::AccountsDB->open('accounts') or die("Could not open destination account db\n");

my %accessMap = (
    'wr-admin-rd-group' => {
	GroupAccess => 'r', 
	OtherAccess => '' 
    },
    'wr-group-rd-everyone' => {
	GroupAccess => 'rw', 
	OtherAccess => 'r' 
    },
    'wr-group-rd-group' => {
	GroupAccess => 'rw', 
	OtherAccess => '' 
    },
    'default' => {
	GroupAccess => 'rw', 
	OtherAccess => 'r' 
    }
    );

foreach my $srcIbay ($srcAccountsDb->ibays()) {
    my $ibayName = $srcIbay->key;
    my $isCreated = $dstAccountsDb->get($ibayName) ? 0 : 1;
    my $dstIbay = $dstAccountsDb->get($ibayName) 
	|| $dstAccountsDb->new_record($ibayName, {type => 'ibay'});

    my %access = %{defined $accessMap{$srcIbay->prop('UserAccess')} ? 
		       $accessMap{$srcIbay->prop('UserAccess')} : $accessMap{default}};

    $dstIbay->merge_props(
	Description => $srcIbay->prop('Name'), 
	OwningGroup => $srcIbay->prop('Group'),	
	AclRead => '',
	AclWrite => '',
	%access);

    my $eventName = $isCreated ? 'ibay-create' : 'ibay-modify';
    if( ! esmith::event::event_signal($eventName, $ibayName)) {
	warn("[ERROR] $eventName $ibayName event failed\n");
	$errors++;
	next;
    }

    # Migrate data
    if( ! migrateDir(
	$sourceDir . '/home/e-smith/files/ibays/' . $ibayName, 
	'/var/lib/nethserver/ibay/' . $ibayName
	)) {
	warn("[ERROR] failed to migrate $ibayName ibay directory.\n");
	$errors++;
	next;
    }

    if( ! esmith::event::event_signal('ibay-reset-permissions', $ibayName)) {
	warn("[ERROR] ibay-reset-permissions $ibayName event failed\n");
	$errors++;
	next;
    }
	
}

# Restore ACLs
chdir '/var/lib/nethserver/ibay/';
system('/usr/bin/setfacl', '--restore=' . $sourceDir . '/home/e-smith/db/acls.dump');
if($? != 0) {
    warn("[ERROR] failed to restore POSIX ACLs\n");
    $errors++;
}


if($errors > 0) {
    warn "[WARNING] $errors error(s) occurred in nethserver-samba-migrate action\n";
    exit(1);
}

# action ends:
exit(0);
