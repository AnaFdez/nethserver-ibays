#!/usr/bin/perl -w

#
# Copyright (C) 2012 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# copyright (C) 1999-2005 Mitel Networks Corporation
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#
package esmith;

use strict;
use Errno;
use File::Find;
use esmith::util;
use esmith::AccountsDB;
use Data::Dumper;

my $ibayBasePath = '/var/lib/nethserver/ibay/';

my $event = shift;
my $ibayName = shift;

die "ibayName argument missing" unless defined ($ibayName);

my $accountsDb = esmith::AccountsDB->open();
my $ibay = $accountsDb->get($ibayName) or 
	die "Couldn't find $ibayName record in accounts db\n";

if ($ibay->prop('type') ne 'ibay') {
    die "Account $ibayName is not an ibay account; modify ibay event failed.\n"
}

my $ibayPath = $ibayBasePath . $ibayName;

my $OwningGroup = $ibay->prop('OwningGroup') ?  $ibay->prop('OwningGroup') : 'root';
my $GroupAccess = $ibay->prop('GroupAccess') ?  $ibay->prop('GroupAccess') : 'rw';
my $OtherAccess = $ibay->prop('OtherAccess') ?  $ibay->prop('OtherAccess') : '';
my @AclRead = $ibay->prop('AclRead') ? split(',', $ibay->prop('AclRead')) : '';
my @AclWrite = $ibay->prop('AclWrite') ? split(',', $ibay->prop('AclWrite')) : '';

my $basePerms = 0600;

if($GroupAccess =~ /r/) {
    $basePerms |= 040;
}

if($GroupAccess =~ /w/) {
    $basePerms |= 020;
}

if($OtherAccess =~ /r/) {
    $basePerms |= 04;
}

sub prepareAcls
{
    # initialize for builtin group "shared"
    my %p = ( 'shared' => 1 );

    # first bit: is user or group?
    $p{$_->key} = 0 foreach ($accountsDb->users); 
    $p{$_->key} = 1 foreach ($accountsDb->groups);

    # 2nd bit: has write access?
    foreach my $user (@AclWrite) {
	next if( ! defined $p{$user});
	$p{$user} |= 2;
    }

    # 3rd bit: has read access?
    foreach my $user (@AclRead) {
	next if( ! defined $p{$user});
	$p{$user} |= 4;
    }

    return map { join(':', 
		      ($p{$_} & 1) ? 'g' : 'u',     # is user or group
		      $_, 
		      (($p{$_} & 4) ? 'r' : '') .   # has read access
		      (($p{$_} & 2) ? 'w' : '') .   # has write access
		      'X'                           # conditional eXecute bit (see manpage setfacl)
		     ) } grep { $p{$_} > 1 } keys %p;

}

my @acls = prepareAcls();

# open a pipe to setfacl and pass the file list to it:
open(my $psetfacl, '| /usr/bin/setfacl -b ' . ( @acls ? ('-m ' . join(',', @acls)) : '') . ' - ') || die('setfacl error: ' . $!);

sub process
{
    if (-l) {
	$File::Find::prune = 1;
	return;
    }

    esmith::util::chownFile('root', $OwningGroup, $_);

    my $perms = $basePerms;
       
    if (-d) {
	# Set execute and set-gid bits on directories:
	$perms |= $basePerms & 040 ? 02010 : 0; # is readable by group?
	$perms |= $basePerms & 004 ? 1 : 0; # is readable by others?
	$perms |= 0100; # always readable by owner (root)
    } elsif (-f) {
	# Preserve execute permissions on files:
	$perms |= (stat($_))[2] & 0111;
    } else {
	# Skip other file types..
	return;
    }
    
    # printf "chmod %o %s\n", $perms, $_;
    chmod $perms, $_;

    # send the file full path into the pipe:
    print $psetfacl $File::Find::name . "\n";
}

chdir $ibayPath;
find(\&process, $ibayPath);
close($psetfacl);


